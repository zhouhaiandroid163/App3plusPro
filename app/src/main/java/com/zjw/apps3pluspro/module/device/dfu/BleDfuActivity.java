package com.zjw.apps3pluspro.module.device.dfu;import android.annotation.SuppressLint;import android.app.ActivityManager;import android.app.Dialog;import android.app.LoaderManager;import android.app.NotificationManager;import android.app.ProgressDialog;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothManager;import android.content.BroadcastReceiver;import android.content.Context;import android.content.CursorLoader;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.Loader;import android.content.SharedPreferences;import android.content.pm.PackageManager;import android.database.Cursor;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.os.Message;import android.os.PowerManager;import android.preference.PreferenceManager;import android.provider.MediaStore;import android.text.TextUtils;import android.view.KeyEvent;import android.view.View;import android.view.View.OnClickListener;import android.webkit.MimeTypeMap;import android.widget.Button;import android.widget.ProgressBar;import android.widget.TextView;import android.widget.Toast;import androidx.appcompat.app.AlertDialog;import androidx.localbroadcastmanager.content.LocalBroadcastManager;import com.android.volley.VolleyError;import com.zjw.apps3pluspro.HomeActivity;import com.zjw.apps3pluspro.R;import com.zjw.apps3pluspro.application.BaseApplication;import com.zjw.apps3pluspro.base.BaseActivity;import com.zjw.apps3pluspro.bleservice.BroadcastTools;import com.zjw.apps3pluspro.network.NewVolleyRequest;import com.zjw.apps3pluspro.network.RequestJson;import com.zjw.apps3pluspro.network.ResultJson;import com.zjw.apps3pluspro.network.VolleyInterface;import com.zjw.apps3pluspro.network.entity.RequestInfo;import com.zjw.apps3pluspro.network.javabean.DeviceBean;import com.zjw.apps3pluspro.bleservice.BleConstant;import com.zjw.apps3pluspro.bleservice.BtSerializeation;import com.zjw.apps3pluspro.sharedpreferences.BleDeviceTools;import com.zjw.apps3pluspro.utils.DialogUtils;import com.zjw.apps3pluspro.utils.log.MyLog;import com.zjw.apps3pluspro.bleservice.UpdateInfoService;import com.zjw.apps3pluspro.utils.AppUtils;import com.zjw.apps3pluspro.utils.Constants;import org.json.JSONObject;import java.io.File;import no.nordicsemi.android.dfu.DfuProgressListener;import no.nordicsemi.android.dfu.DfuProgressListenerAdapter;import no.nordicsemi.android.dfu.DfuServiceInitiator;import no.nordicsemi.android.dfu.DfuServiceListenerHelper;/** * 固件升级 */public class BleDfuActivity extends BaseActivity implements OnClickListener, LoaderManager.LoaderCallbacks<Cursor>, UploadCancelFragment.CancelFragmentListener {    private final String TAG = BleDfuActivity.class.getSimpleName();    private Context mContext;    //轻量级存储    private BleDeviceTools mBleDeviceTools = BaseApplication.getBleDeviceTools();    private Button one_update_device, one_update_device_file_headle;    private Handler mBleHandler;    private Button down_dfu_zip;    //锁屏    PowerManager.WakeLock wakeLock = null;    //下载的文件名    private final String DFU_FILE_NAME = "nor.zip";    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        // 隐藏标题栏        mContext = BleDfuActivity.this;        mBleHandler = new Handler();        // 蓝牙适配器        mScanfBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();        initBroadcast();        initView();        DfuinitView();        //是否支持ble        isBLESupported();        //是否开启ble        if (!isBLEEnabled()) {            showBLEDialog();        }        // 恢复已保存的状态        mFileType = DfuService.TYPE_AUTO; // 默认        if (savedInstanceState != null) {            mFileType = savedInstanceState.getInt(DATA_FILE_TYPE);            mFileTypeTmp = savedInstanceState.getInt(DATA_FILE_TYPE_TMP);            mFilePath = savedInstanceState.getString(DATA_FILE_PATH);            mFileStreamUri = savedInstanceState.getParcelable(DATA_FILE_STREAM);            mInitFilePath = savedInstanceState.getString(DATA_INIT_FILE_PATH);            mInitFileStreamUri = savedInstanceState.getParcelable(DATA_INIT_FILE_STREAM);            mSelectedDevice = savedInstanceState.getParcelable(DATA_DEVICE);            mStatusOk = mStatusOk || savedInstanceState.getBoolean(DATA_STATUS);            MyLog.i(TAG, "DFU 升级 = 回复？savedInstanceState = mFileType = " + mFileType);        }        File destDir = new File(Constants.UPDATE_DEVICE_FILE);        if (!destDir.exists()) {            destDir.mkdirs();        }    }    @Override    protected int setLayoutId() {        return R.layout.activity_ble_dfu;    }    @Override    protected void initViews() {        super.initViews();    }    @SuppressLint("InvalidWakeLockTag")    @Override    protected void onResume() {        super.onResume();        wakeLock = ((PowerManager) getSystemService(POWER_SERVICE)).newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK| PowerManager.ON_AFTER_RELEASE, TAG);        wakeLock.acquire();        //注册DFU服务        DfuServiceListenerHelper.registerProgressListener(this, mDfuProgressListener);    }    @Override    protected void onPause() {        super.onPause();        //反注册DFU服务        DfuServiceListenerHelper.unregisterProgressListener(this, mDfuProgressListener);    }    @Override    protected void onStop() {        // TODO Auto-generated method stub        super.onStop();        if (BaseApplication.getHttpQueue() != null) {            BaseApplication.getHttpQueue().cancelAll(TAG);        }    }    protected void onDestroy() {        if (mHandler != null) {            mHandler.removeCallbacksAndMessages(null);        }        if (mBleHandler != null) {            mBleHandler.removeCallbacksAndMessages(null);        }        if (ScanfHandler != null) {            ScanfHandler.removeCallbacksAndMessages(null);        }        if (broadcastReceiver != null) {            try {                unregisterReceiver(broadcastReceiver);            } catch (Exception e) {            }        }        super.onDestroy();    }    void initView() {        ((TextView) findViewById(R.id.public_head_title)).setText(getString(R.string.firmware_update));        findViewById(R.id.public_head_back).setOnClickListener(this);        findViewById(R.id.public_head_back).setVisibility(View.INVISIBLE);        down_dfu_zip = (Button) findViewById(R.id.down_dfu_zip);        down_dfu_zip.setOnClickListener(this);        findViewById(R.id.input_dfu_mode).setOnClickListener(this);        findViewById(R.id.scanf_dfu_device).setOnClickListener(this);        findViewById(R.id.load_dfu_ble_device).setOnClickListener(this);        findViewById(R.id.start_dfu_update).setOnClickListener(this);        one_update_device = (Button) findViewById(R.id.one_update_device);        one_update_device.setOnClickListener(this);        one_update_device_file_headle = (Button) findViewById(R.id.one_update_device_file_headle);        one_update_device_file_headle.setOnClickListener(this);        findViewById(R.id.loading_dfu_zip).setOnClickListener(this);        ScanfHandler = new Handler();        initHandle();    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.public_head_back:                finish();                break;            case R.id.loading_dfu_zip:                LoadDeviceFile();                break;            case R.id.one_update_device:                if (HomeActivity.getBlueToothStatus() == BleConstant.STATE_CONNECTED) {                    writeRXCharacteristic(BtSerializeation.inputDfu());                    MyLog.i(TAG, "DFU 脸上了111");                    isOneUpdate = true;                    scanLeDevice(true);                } else {                    MyLog.i(TAG, "DFU 断开了111");                }                break;            case R.id.input_dfu_mode:                if (HomeActivity.getBlueToothStatus() == BleConstant.STATE_CONNECTED) {                    writeRXCharacteristic(BtSerializeation.inputDfu());                    MyLog.i(TAG, "DFU 脸上了222");                } else {                    MyLog.i(TAG, "DFU 断开了222");                }                break;            case R.id.down_dfu_zip:                getNetDeviceVersion(mBleDeviceTools.get_ble_device_type(), mBleDeviceTools.get_ble_device_version(), mBleDeviceTools.get_device_platform_type());                break;            case R.id.scanf_dfu_device:                isOneUpdate = false;                scanLeDevice(true);                break;            case R.id.load_dfu_ble_device:                LoadDeviceBle();                break;            case R.id.start_dfu_update:                uploadDevice();                break;            case R.id.one_update_device_file_headle:                isOneUpdate = true;                scanLeDevice(true);                break;            default:                break;        }    }    protected void onStart() {        // TODO Auto-generated method stub        super.onStart();    }    public boolean onKeyDown(int keyCode, KeyEvent event) {        if ((keyCode == KeyEvent.KEYCODE_BACK)) {            return false;        } else {            return super.onKeyDown(keyCode, event);        }    }    ///////////////////////////////////    //设置设备名称    private static final String PREFS_DEVICE_NAME = "no.nordicsemi.android.nrftoolbox.dfu.PREFS_DEVICE_NAME";    //设置文件名称    private static final String PREFS_FILE_NAME = "no.nordicsemi.android.nrftoolbox.dfu.PREFS_FILE_NAME";    //设置设备类型    private static final String PREFS_FILE_TYPE = "no.nordicsemi.android.nrftoolbox.dfu.PREFS_FILE_TYPE";    //设置文件大小    private static final String PREFS_FILE_SIZE = "no.nordicsemi.android.nrftoolbox.dfu.PREFS_FILE_SIZE";    //数据设备    private static final String DATA_DEVICE = "device";    //数据设备类型    private static final String DATA_FILE_TYPE = "file_type";    //数据设备    private static final String DATA_FILE_TYPE_TMP = "file_type_tmp";    //数据文件路径    private static final String DATA_FILE_PATH = "file_path";    //数据文件流    private static final String DATA_FILE_STREAM = "file_stream";    //数据初始化文件路径    private static final String DATA_INIT_FILE_PATH = "init_file_path";    //数据初始化文件流    private static final String DATA_INIT_FILE_STREAM = "init_file_stream";    //数据状态    private static final String DATA_STATUS = "status";    //额外uri    private static final String EXTRA_URI = "uri";    //打开BT要求    private static final int ENABLE_BT_REQ = 0;    //选择初始文件要求    private static final int SELECT_INIT_FILE_REQ = 2;    private TextView mDeviceNameView;    private TextView mFileNameView;    private TextView mFileTypeView;    private TextView mFileSizeView;    private TextView mFileStatusView;    private TextView mTextPercentage;    private TextView mTextUploading;    private ProgressBar mProgressBar;    private BluetoothDevice mSelectedDevice;    private String mFilePath;    private Uri mFileStreamUri;    private String mInitFilePath;    private Uri mInitFileStreamUri;    private int mFileType;    private int mFileTypeTmp; // This value is being used when user is selecting a file not to overwrite the old value (in case he/she will cancel selecting file)    private boolean mStatusOk;    //DFU监听对象    private final DfuProgressListener mDfuProgressListener = new DfuProgressListenerAdapter() {        @Override        public void onDeviceConnecting(final String deviceAddress) {            mProgressBar.setIndeterminate(true);            mTextPercentage.setText(R.string.dfu_status_connecting);        }        @Override        public void onDfuProcessStarting(final String deviceAddress) {            mProgressBar.setIndeterminate(true);            mTextPercentage.setText(R.string.dfu_status_starting);        }        @Override        public void onEnablingDfuMode(final String deviceAddress) {            mProgressBar.setIndeterminate(true);            mTextPercentage.setText(R.string.dfu_status_switching_to_dfu);        }        @Override        public void onFirmwareValidating(final String deviceAddress) {            mProgressBar.setIndeterminate(true);            mTextPercentage.setText(R.string.dfu_status_validating);        }        @Override        public void onDeviceDisconnecting(final String deviceAddress) {            mProgressBar.setIndeterminate(true);            mTextPercentage.setText(R.string.dfu_status_disconnecting);        }        @Override        public void onDfuCompleted(final String deviceAddress) {            mTextPercentage.setText(R.string.dfu_status_completed);            // let's wait a bit until we cancel the notification. When canceled immediately it will be recreated by service again.            new Handler().postDelayed(new Runnable() {                @Override                public void run() {                    onTransferCompleted();                    // if this activity is still open and upload process was completed, cancel the notification                    final NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);                    manager.cancel(DfuService.NOTIFICATION_ID);                }            }, 200);        }        @Override        public void onDfuAborted(final String deviceAddress) {            mTextPercentage.setText(R.string.dfu_status_aborted);            // let's wait a bit until we cancel the notification. When canceled immediately it will be recreated by service again.            new Handler().postDelayed(new Runnable() {                @Override                public void run() {                    onUploadCanceled();                    // if this activity is still open and upload process was completed, cancel the notification                    final NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);                    manager.cancel(DfuService.NOTIFICATION_ID);                }            }, 200);        }        @Override        public void onProgressChanged(final String deviceAddress, final int percent, final float speed, final float avgSpeed, final int currentPart, final int partsTotal) {            mProgressBar.setIndeterminate(false);            mProgressBar.setProgress(percent);            mTextPercentage.setText(getString(R.string.dfu_uploading_percentage, percent));            if (partsTotal > 1)                mTextUploading.setText(getString(R.string.dfu_status_uploading_part, currentPart, partsTotal));            else                mTextUploading.setText(R.string.dfu_status_uploading);        }        @Override        public void onError(final String deviceAddress, final int error, final int errorType, final String message) {            showErrorMessage(message);            // We have to wait a bit before canceling notification. This is called before DfuService creates the last notification.            new Handler().postDelayed(new Runnable() {                @Override                public void run() {                    // if this activity is still open and upload process was completed, cancel the notification                    final NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);                    manager.cancel(DfuService.NOTIFICATION_ID);                }            }, 200);        }    };    @Override    protected void onSaveInstanceState(final Bundle outState) {        super.onSaveInstanceState(outState);        MyLog.i(TAG, "DFU 升级 = 保存onSaveInstanceState");        outState.putInt(DATA_FILE_TYPE, mFileType);        outState.putInt(DATA_FILE_TYPE_TMP, mFileTypeTmp);        outState.putString(DATA_FILE_PATH, mFilePath);        outState.putParcelable(DATA_FILE_STREAM, mFileStreamUri);        outState.putString(DATA_INIT_FILE_PATH, mInitFilePath);        outState.putParcelable(DATA_INIT_FILE_STREAM, mInitFileStreamUri);        outState.putParcelable(DATA_DEVICE, mSelectedDevice);        outState.putBoolean(DATA_STATUS, mStatusOk);    }    private void DfuinitView() {        mDeviceNameView = (TextView) findViewById(R.id.device_name);        mFileNameView = (TextView) findViewById(R.id.file_name);        mFileTypeView = (TextView) findViewById(R.id.file_type);        mFileSizeView = (TextView) findViewById(R.id.file_size);        mFileStatusView = (TextView) findViewById(R.id.file_status);        mTextPercentage = (TextView) findViewById(R.id.textviewProgress);        mTextUploading = (TextView) findViewById(R.id.textviewUploading);        mProgressBar = (ProgressBar) findViewById(R.id.progressbar_file);        final SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);        //DFU服务是否开启        if (isDfuServiceRunning()) {            // 恢复图像文件信息            mDeviceNameView.setText(preferences.getString(PREFS_DEVICE_NAME, ""));            mFileNameView.setText(preferences.getString(PREFS_FILE_NAME, ""));            mFileTypeView.setText(preferences.getString(PREFS_FILE_TYPE, ""));            mFileSizeView.setText(preferences.getString(PREFS_FILE_SIZE, ""));            mFileStatusView.setText(R.string.dfu_file_status_ok);            mStatusOk = true;            //显示进度条            showProgressBar();        }    }    /**     * //是否支持Ble     */    private void isBLESupported() {        if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {            showToast(R.string.dfu_no_ble);            finish();        }    }    /**     * 是否打开蓝牙     *     * @return     */    private boolean isBLEEnabled() {        final BluetoothManager manager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);        final BluetoothAdapter adapter = manager.getAdapter();        return adapter != null && adapter.isEnabled();    }    /**     * //显示蓝牙对话框     */    private void showBLEDialog() {        final Intent enableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);        startActivityForResult(enableIntent, ENABLE_BT_REQ);    }    //加载器创建    @Override    public Loader<Cursor> onCreateLoader(final int id, final Bundle args) {        final Uri uri = args.getParcelable(EXTRA_URI);        /*         * Some apps, f.e. Google Drive allow to select file that is not on the device. There is no "_data" column handled by that provider. Let's try to obtain         * all columns and than check which columns are present.         */        // final String[] projection = new String[] { MediaStore.MediaColumns.DISPLAY_NAME, MediaStore.MediaColumns.SIZE, MediaStore.MediaColumns.DATA };        return new CursorLoader(this, uri, null /* all columns, instead of projection */, null, null, null);    }    //复位    @Override    public void onLoaderReset(final Loader<Cursor> loader) {        mFileNameView.setText(null);        mFileTypeView.setText(null);        mFileSizeView.setText(null);        mFilePath = null;        mFileStreamUri = null;        mStatusOk = false;    }    //关闭    @Override    public void onLoadFinished(final Loader<Cursor> loader, final Cursor data) {        if (data != null && data.moveToNext()) {            /*             * Here we have to check the column indexes by name as we have requested for all. The order may be different.             */            final String fileName = data.getString(data.getColumnIndex(MediaStore.MediaColumns.DISPLAY_NAME)/* 0 DISPLAY_NAME */);            final int fileSize = data.getInt(data.getColumnIndex(MediaStore.MediaColumns.SIZE) /* 1 SIZE */);            String filePath = null;            final int dataIndex = data.getColumnIndex(MediaStore.MediaColumns.DATA);            if (dataIndex != -1)                filePath = data.getString(dataIndex /* 2 DATA */);            if (!TextUtils.isEmpty(filePath))                mFilePath = filePath;            MyLog.i(TAG, "DFU 升级 = updateFileInfo()222");            updateFileInfo(fileName, fileSize, mFileType);        } else {            mFileNameView.setText(null);            mFileTypeView.setText(null);            mFileSizeView.setText(null);            mFilePath = null;            mFileStreamUri = null;            mFileStatusView.setText(R.string.dfu_file_status_error);            mStatusOk = false;        }    }    /**     * Updates the file information on UI     * 更新用户界面上的文件信息     *     * @param fileName file name     * @param fileSize file length     */    private void updateFileInfo(final String fileName, final long fileSize, final int fileType) {        mFileNameView.setText(fileName);        mFileSizeView.setText(getString(R.string.dfu_file_size_text, fileSize));        final String extension = mFileType == DfuService.TYPE_AUTO ? "(?i)ZIP" : "(?i)HEX|BIN"; // (?i) =  case insensitive        final boolean statusOk = mStatusOk = MimeTypeMap.getFileExtensionFromUrl(fileName).matches(extension);        mFileStatusView.setText(statusOk ? R.string.dfu_file_status_ok : R.string.dfu_file_status_invalid);        one_update_device.setEnabled(statusOk);        // Ask the user for the Init packet file if HEX or BIN files are selected. In case of a ZIP file the Init packets should be included in the ZIP.        if (statusOk && fileType != DfuService.TYPE_AUTO) {            new AlertDialog.Builder(this).setTitle(R.string.dfu_file_init_title).setMessage(R.string.dfu_file_init_message)                    .setNegativeButton(R.string.dialog_no, new DialogInterface.OnClickListener() {                        @Override                        public void onClick(final DialogInterface dialog, final int which) {                            mInitFilePath = null;                            mInitFileStreamUri = null;                        }                    }).setPositiveButton(R.string.dialog_yes, new DialogInterface.OnClickListener() {                @Override                public void onClick(final DialogInterface dialog, final int which) {                    final Intent intent = new Intent(Intent.ACTION_GET_CONTENT);                    intent.setType(DfuService.MIME_TYPE_OCTET_STREAM);                    intent.addCategory(Intent.CATEGORY_OPENABLE);                    startActivityForResult(intent, SELECT_INIT_FILE_REQ);                }            }).show();        }        if (statusOk) {            writeRXCharacteristic(BtSerializeation.inputDfu());            // 延迟使能            mBleHandler.postDelayed(new Runnable() {                @Override                public void run() {                    MyLog.i(TAG, "DFU 脸上了111");                    isOneUpdate = true;                    scanLeDevice(true);                }            }, 500);        }    }    /**     * Called when Select File was pressed     * 当选择文件被按下时调用     *     * @param view a button that was pressed     */    public BluetoothAdapter mBluetoothAdapter = null;    void LoadDeviceFile() {        mFileType = 0;        mFileTypeTmp = mFileType;        String SDCARD = Constants.UPDATE_DEVICE_FILE  + DFU_FILE_NAME;        MyLog.i(TAG, "DFU 加载固件 SDCARD　= " + SDCARD);        File file = new File(SDCARD);        mFilePath = SDCARD;        updateFileInfo(file.getName(), file.length(), mFileType);    }    void LoadDeviceBle() {        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();//        BluetoothDevice device = mBluetoothAdapter.getRemoteDevice("E2:AD:22:1F:CC:93");//        BluetoothDevice device = mBluetoothAdapter.getRemoteDevice("F6:19:B6:18:67:DB");//        mSelectedDevice = device;        String name = mSelectedDevice.getName();        mDeviceNameView.setText(name != null ? name : getString(R.string.dfu_not_available));        MyLog.i(TAG, "DFU 升级 001 address = " + mSelectedDevice.getAddress() + "  name = " + mSelectedDevice.getName());    }    /**     * Callback of UPDATE/CANCEL button on DfuActivity     * //点击上传按钮触发     */    public void onUploadClicked(final View view) {        uploadDevice();    }    void uploadDevice() {        //如果服务已经运行        if (isDfuServiceRunning()) {            showUploadCancelDialog();            return;        }        // Check whether the selected file is a HEX file (we are just checking the extension)        if (!mStatusOk) {            AppUtils.showToast(mContext, R.string.dfu_file_status_invalid_message);            return;        }        // Save current state in order to restore it if user quit the Activity        final SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);        final SharedPreferences.Editor editor = preferences.edit();        //设置设备名称        editor.putString(PREFS_DEVICE_NAME, mSelectedDevice.getName());        editor.putString(PREFS_FILE_NAME, mFileNameView.getText().toString());        editor.putString(PREFS_FILE_TYPE, mFileTypeView.getText().toString());        editor.putString(PREFS_FILE_SIZE, mFileSizeView.getText().toString());        editor.apply();        showProgressBar();        final boolean keepBond = false;        final boolean forceDfu = false;        final boolean enablePRNs = Build.VERSION.SDK_INT < Build.VERSION_CODES.M;        String value = String.valueOf(DfuServiceInitiator.DEFAULT_PRN_VALUE);        int numberOfPackets;        try {            numberOfPackets = Integer.parseInt(value);        } catch (final NumberFormatException e) {            numberOfPackets = DfuServiceInitiator.DEFAULT_PRN_VALUE;        }        final DfuServiceInitiator starter = new DfuServiceInitiator(mSelectedDevice.getAddress())                .setDeviceName(mSelectedDevice.getName())                .setKeepBond(keepBond)                .setForceDfu(forceDfu)                .setPacketsReceiptNotificationsEnabled(enablePRNs)                .setPacketsReceiptNotificationsValue(numberOfPackets)                .setPrepareDataObjectDelay(400)                .setUnsafeExperimentalButtonlessServiceInSecureDfuEnabled(true);        if (mFileType == DfuService.TYPE_AUTO) {            String SDCARD = Constants.UPDATE_DEVICE_FILE  + DFU_FILE_NAME;            File file_log = new File(SDCARD);            starter.setZip(null, mFilePath);//            starter.setZip(getImageContentUri(this,file_log), SDCARD);            MyLog.i(TAG, "DFU 升级 = mFileStreamUri1 " + mFileStreamUri);            MyLog.i(TAG, "DFU 升级 = mFilePath1 " + mFilePath);//            MyLog.i(TAG,"DFU升级 = mFileStreamUri2 " + getImageContentUri(this,file_log));//            MyLog.i(TAG,"DFU升级 = mFilePath2 " + SDCARD);        } else {            starter.setBinOrHex(mFileType, mFileStreamUri, mFilePath).setInitFile(mInitFileStreamUri, mInitFilePath);        }        starter.start(this, DfuService.class);    }    //取消上传文件对话框    private void showUploadCancelDialog() {        final LocalBroadcastManager manager = LocalBroadcastManager.getInstance(this);        final Intent pauseAction = new Intent(DfuService.BROADCAST_ACTION);        pauseAction.putExtra(DfuService.EXTRA_ACTION, DfuService.ACTION_PAUSE);        manager.sendBroadcast(pauseAction);        final UploadCancelFragment fragment = UploadCancelFragment.getInstance();        fragment.onAttach(this);    }    //开始传输    private void showProgressBar() {        mProgressBar.setVisibility(View.VISIBLE);        mTextPercentage.setVisibility(View.VISIBLE);        mTextPercentage.setText(null);        mTextUploading.setText(R.string.dfu_status_uploading);        mTextUploading.setVisibility(View.VISIBLE);    }    private void onTransferCompleted() {        clearUI(true);        showToast(R.string.dfu_success);        setResult(RESULT_OK);        finish();    }    public void onUploadCanceled() {        clearUI(false);        showToast(R.string.dfu_aborted);    }    //取消升级对话框    @Override    public void onCancelUpload() {        mProgressBar.setIndeterminate(true);        mTextUploading.setText(R.string.dfu_status_aborting);        mTextPercentage.setText(null);    }    //升级失败    private void showErrorMessage(final String message) {        clearUI(false);        showToast("Upload failed: " + message);        finish();    }    /**     * //清除UI     *     * @param clearDevice     */    private void clearUI(final boolean clearDevice) {        mProgressBar.setVisibility(View.INVISIBLE);        mTextPercentage.setVisibility(View.INVISIBLE);        mTextUploading.setVisibility(View.INVISIBLE);        if (clearDevice) {            mSelectedDevice = null;            mDeviceNameView.setText("");        }        // Application may have lost the right to these files if Activity was closed during upload (grant uri permission). Clear file related values.        mFileNameView.setText(null);        mFileTypeView.setText(null);        mFileSizeView.setText(null);        mFileStatusView.setText(R.string.dfu_file_status_no_file);        mFilePath = null;        mFileStreamUri = null;        mInitFilePath = null;        mInitFileStreamUri = null;        mStatusOk = false;    }    //Toast工具类    private void showToast(final int messageResId) {        Toast.makeText(this, messageResId, Toast.LENGTH_SHORT).show();    }    //Toast工具类    private void showToast(final String message) {        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();    }    //DFU 是否开启    private boolean isDfuServiceRunning() {        ActivityManager manager = (ActivityManager) getSystemService(ACTIVITY_SERVICE);        for (ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {            if (DfuService.class.getName().equals(service.service.getClassName())) {                return true;            }        }        return false;    }    ////////////////////////////////////////////////////////////////////////    UpdateInfoService updateInfoService;    public final int UPDATE = 2;    private JSONObject versionObject;    private String version, downloadAddress, downloadContentEN,            downloadContentZH, isNeedUpdate;    /**     * 获取服务器版本号     */    private void getNetDeviceVersion(int model, int c_upgrade_version, int device_platform_type) {        // TODO Auto-generated method stub        down_dfu_zip.setEnabled(false);        down_dfu_zip.setVisibility(View.GONE);        RequestInfo mRequestInfo = RequestJson.getDeviceUpdateInfo(String.valueOf(model), String.valueOf(c_upgrade_version), device_platform_type);        MyLog.i(TAG, "请求接口-获取设备版本号 mRequestInfo = " + mRequestInfo.toString());        NewVolleyRequest.RequestPost(mRequestInfo, TAG,                new VolleyInterface(mContext, VolleyInterface.mListener, VolleyInterface.mErrorListener) {                    @Override                    public void onMySuccess(JSONObject result) {                        // TODO Auto-generated method stub                        MyLog.i(TAG, "请求接口-获取设备版本号 result = " + result);                        DeviceBean mDeviceBean = ResultJson.DeviceBean(result);                        //请求成功                        if (mDeviceBean.isRequestSuccess()) {                            if (mDeviceBean.isOk() == 1) {                                MyLog.i(TAG, "请求接口-获取设备版本号 成功");                                if (mDeviceBean.isUpdate(mBleDeviceTools)) {                                    downloadAddress = mDeviceBean.getData().getVersionUrl();                                    downloadContentEN = "";                                    downloadContentZH = "";                                    isNeedUpdate = "";                                    ForceUpdate();                                } else {                                    AppUtils.showToast(mContext, R.string.already_new);                                    finish();                                    MyLog.i(TAG, "固件升级 08 手环管理 不需要升级 ");                                }                            } else if (mDeviceBean.isOk() == 2) {                                AppUtils.showToast(mContext, R.string.already_new);                                finish();                            } else {                                AppUtils.showToast(mContext, R.string.already_new);                                finish();                            }                            //请求失败                        } else {                            AppUtils.showToast(mContext, R.string.already_new);                            finish();                            MyLog.i(TAG, "请求接口-获取设备版本号 请求异常(0)");                        }                    }                    @Override                    public void onMyError(VolleyError arg0) {                        // TODO Auto-generated method stub                        MyLog.i(TAG, "请求接口-获取设备版本号 请求失败 = message = " + arg0.getMessage());                        AppUtils.showToast(mContext, R.string.net_worse_try_again);                        return;                    }                });    }    private void ForceUpdate() {        // TODO Auto-generated method stub        new Thread() {            public void run() {                try {                    updateInfoService = new UpdateInfoService(mContext);                    handler1.sendEmptyMessage(UPDATE);                } catch (Exception e) {                    e.printStackTrace();                }            }        }.start();    }    private Handler handler1 = new Handler() {        public void handleMessage(Message msg) {            switch (msg.what) {                case UPDATE:                    // 如果有更新就提示//                    if (updateInfoService.isNeedUpdate(version)) {//                        showUpdateDialog();//                    }//                    showUpdateDialog();                    downDeviceFile();                    break;//                case REFRESH:// 刷新数据的操作//                    getHomeData(uid, MyTime.getTime());//                    break;            }        }        ;    };    void downDeviceFile() {        if (Environment.getExternalStorageState().equals(                Environment.MEDIA_MOUNTED)) {            downFile(downloadAddress);        } else {            AppUtils.showToast(mContext, R.string.sd_card);        }    }    private Dialog progressDialog;    void downFile(final String url) {        progressDialog = DialogUtils.BaseDialogShowProgress(context,                context.getResources().getString(R.string.download_title),                context.getResources().getString(R.string.loading0),                context.getDrawable(R.drawable.black_corner_bg)        );        updateInfoService.downLoadFile2(url, progressDialog, handler1, DFU_FILE_NAME);    }    ////////////////////////////    boolean isOneUpdate = false;    @SuppressLint("NewApi")    public BluetoothAdapter mScanfBluetoothAdapter = null;    private Handler ScanfHandler;    private boolean isBLEScanning = false;    // 10秒后停止查找搜索.    private static final long SCAN_PERIOD = 1000 * 20;    public final static int MESSAGE_BLE_SCANF = 101;    private Handler mHandler;    private void scanLeDevice(final boolean enable) {        // 扫描十秒后停止        if (enable) {            if (!this.mScanfBluetoothAdapter.isEnabled()) {                this.mScanfBluetoothAdapter.enable();            }            // Stops scanning after a pre-defined scan period.            ScanfHandler.postDelayed(new Runnable() {                @Override                public void run() {                    MyLog.i(TAG, "DFU  = 停止扫描=");                    stopSCanf();                    mScanfBluetoothAdapter.stopLeScan(mLeScanCallback);                    // return ;                }            }, SCAN_PERIOD);            // 正在扫描            MyLog.i(TAG, "DFU  = 开始扫描=");            startSCanf();            mScanfBluetoothAdapter.startLeScan(mLeScanCallback);        } else {            MyLog.i(TAG, "DFU  = 停止扫描=");            stopSCanf();            mScanfBluetoothAdapter.stopLeScan(mLeScanCallback);        }    }    void stopSCanf() {        isBLEScanning = false;        // ble_progressBar.setVisibility(View.GONE);    }    void startSCanf() {        isBLEScanning = true;        MyLog.i(TAG, "DFU  = 开始扫描=");    }    // 蓝牙适配器    @SuppressLint("NewApi")    private BluetoothAdapter.LeScanCallback mLeScanCallback = new BluetoothAdapter.LeScanCallback() {        public void onLeScan(final BluetoothDevice device, int rssi,                             byte[] scanRecord) {            runOnUiThread(new Runnable() {                @Override                public void run() {                    if (isBLEScanning) {                        sendDeviceDate(device);                    }                }            });        }    };    void sendDeviceDate(BluetoothDevice device) {        Message message = new Message();        message.what = MESSAGE_BLE_SCANF;        message.obj = device;        mHandler.sendMessage(message);    }    void initHandle() {        mHandler = new Handler() {            @Override            public void handleMessage(Message msg) {                // TODO Auto-generated method stub                switch (msg.what) {                    case MESSAGE_BLE_SCANF:                        // 得到这个BLE设备                        BluetoothDevice btDevice = (BluetoothDevice) msg.obj;                        String old_mac = mBleDeviceTools.get_ble_mac().substring(0, 14);                        String now_mac = btDevice.getAddress().substring(0, 14);                        if (old_mac.equals(now_mac)) {                            MyLog.i(TAG, "DFU 找到了old_mac = " + old_mac + "  now_mac = " + now_mac);                            mSelectedDevice = btDevice;                            scanLeDevice(false);                            if (isOneUpdate) {//                                LoadDeviceFile();                                LoadDeviceBle();                                uploadDevice();                            }                        } else {                            MyLog.i(TAG, "DFU 没找到old_mac = " + old_mac + "  now_mac = " + now_mac);                        }                        break;                    default:                        break;                }                super.handleMessage(msg);            }        };    }    ///////////////////////    private void initBroadcast() {        IntentFilter filter = new IntentFilter();        filter.addAction(BroadcastTools.ACTION_UPDATE_DEVICE_FILE_STATE_SUCCESS);        filter.setPriority(1000);        registerReceiver(broadcastReceiver, filter);    }    // 广播    private BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {        @SuppressWarnings({"unused", "unused"})        @SuppressLint("NewApi")        @Override        public void onReceive(Context context, Intent intent) {            String action = intent.getAction();            switch (action) {                case BroadcastTools.ACTION_UPDATE_DEVICE_FILE_STATE_SUCCESS:                    MyLog.i(TAG, "DFU 收到下载固件成功！");                    LoadDeviceFile();                    break;            }        }    };}